plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}



//apply from: "config.gradle"
//def _admob = false
//def _file = file("${project.rootDir}/configs/app.json")
//if(_file.exists()){
//   def _json = new groovy.json.JsonSlurper()

//    def _config = new groovy.json.JsonSlurper().parseText(jsonFile.text)
////    _admob = _config.admob
////    println("config :" + _admob)
////    def _test = _config.meta.test
////    println("config test meta :" + _test)
//}

//JSONObject readConfig(){
//    File file = null
//    try {
//        file = new File("${project.rootDir}/configs/app.json")
//        if (file.exists()) {
//            FileReader reader = new FileReader(file)
//            int length = 0;
//            byte[] bytes = new byte[1024]
//            StringBuilder builder = new StringBuilder()
//            while ((length = reader.read(byte)) > 0) {
//                builder.append(bytes, 0, length)
//            }
//            String result = builder.toString()
//            JSONObject object = new JSONObject(result)
//            return object
//        }
//    } catch(Exception e){
//        if(file != null) {
//            try {
//                file.close()
//            } catch(IOException e1){
//
//            }
//        }
//    }
//}


android {
    compileSdk 32

    defaultConfig {
        minSdk 21
        targetSdk 32

        consumerProguardFiles "consumer-rules.pro"

//        if(file("${project.rootDir}/configs/app.json").exists()) {
//            def json = readConfig()
//            _admob = json.optBoolean("admob", false)
//
//        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    api project(path: ':adbase')
    api project(path: ':common')

}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def userName = properties.getProperty("USERNAME")
def password = properties.getProperty("PASSWORD")

apply plugin: 'maven-publish'
publishing {
    publications {
        release(MavenPublication){
            groupId='com.easy'
            artifactId = 'ad-core'
            version = '1.0.0'
            afterEvaluate {
                from components.release
            }
        }
    }
    repositories {
        maven {
            url 'https://packages.aliyun.com/maven/repository/2304310-release-55tkv4/'
            credentials {
                it.username = userName
                it.password = password
            }
        }
    }
}